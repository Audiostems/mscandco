# MSC & Co Platform - Custom Domain Configuration
# Professional staging domain setup

service: msc-co-platform

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'staging'}
  region: ${opt:region, 'us-east-1'}
  
  environment:
    NODE_ENV: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DOMAIN_NAME: ${self:custom.customDomain.domainName}
    
    # Environment variables for staging
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${env:AUTH0_CLIENT_SECRET}
    NEXTAUTH_SECRET: ${env:NEXTAUTH_SECRET}
    NEXTAUTH_URL: https://${self:custom.customDomain.domainName}
    
    # S3 Storage for staging
    MUSIC_FILES_BUCKET: ${self:custom.musicBucket}
    ASSETS_BUCKET: ${self:custom.assetsBucket}
    
  # Enterprise IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub "${MusicFilesBucket}/*"
            - !Sub "${AssetsBucket}/*"
            - !Ref MusicFilesBucket
            - !Ref AssetsBucket
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - route53:GetHostedZone
            - route53:ChangeResourceRecordSets
            - acm:RequestCertificate
            - acm:DescribeCertificate
          Resource: "*"

# Custom variables
custom:
  # üåê CONFIGURE YOUR DOMAIN HERE
  customDomain:
    domainName: staging-mscco.${env:BASE_DOMAIN, 'example.com'} # Change this!
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
  
  # S3 bucket names
  musicBucket: msc-co-music-${self:provider.stage}
  assetsBucket: msc-co-assets-${self:provider.stage}
  
  # Environment-specific settings
  environments:
    staging:
      certificateArn: ${env:STAGING_CERTIFICATE_ARN, ''}
      hostedZoneId: ${env:HOSTED_ZONE_ID, ''}
    production:
      certificateArn: ${env:PRODUCTION_CERTIFICATE_ARN, ''}
      hostedZoneId: ${env:HOSTED_ZONE_ID, ''}

# Lambda Functions
functions:
  # Main MSC & Co Application
  mscCoApp:
    handler: handler.main
    memorySize: 2048
    timeout: 30
    events:
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Requested-With
            allowCredentials: true

# AWS Resources
resources:
  Resources:
    # S3 Bucket for Music Files (Private)
    MusicFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.musicBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: 
                - https://${self:custom.customDomain.domainName}
                - http://localhost:3002
              MaxAge: 3000

    # S3 Bucket for Assets (Public)
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.assetsBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              MaxAge: 3000

    # SSL Certificate for Custom Domain
    SSLCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.customDomain.domainName}
        SubjectAlternativeNames:
          - "*.${self:custom.customDomain.domainName}"
        ValidationMethod: DNS
        DomainValidationOptions:
          - DomainName: ${self:custom.customDomain.domainName}
            HostedZoneId: ${self:custom.environments.${self:provider.stage}.hostedZoneId}

    # Custom Domain for API Gateway
    ApiGatewayCustomDomain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        DomainName: ${self:custom.customDomain.domainName}
        CertificateArn: !Ref SSLCertificate
        EndpointConfiguration:
          Types:
            - REGIONAL
        SecurityPolicy: TLS_1_2

    # Route 53 Record for Custom Domain
    Route53Record:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.environments.${self:provider.stage}.hostedZoneId}
        Name: ${self:custom.customDomain.domainName}
        Type: A
        AliasTarget:
          DNSName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName
          HostedZoneId: !GetAtt ApiGatewayCustomDomain.RegionalHostedZoneId

    # CloudFront Distribution for Global CDN
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: MSC & Co Platform CDN - ${self:provider.stage}
          Aliases:
            - ${self:custom.customDomain.domainName}
          ViewerCertificate:
            AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only

  # Stack Outputs
  Outputs:
    CustomDomainUrl:
      Description: Custom Domain URL
      Value: https://${self:custom.customDomain.domainName}
      Export:
        Name: ${self:service}-${self:provider.stage}-custom-domain

    ApiGatewayUrl:
      Description: API Gateway URL (fallback)
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    CloudFrontUrl:
      Description: CloudFront Distribution URL
      Value: !Sub "https://${CloudFrontDistribution.DomainName}"
      Export:
        Name: ${self:service}-${self:provider.stage}-cdn-url

    SSLCertificateArn:
      Description: SSL Certificate ARN
      Value: !Ref SSLCertificate
      Export:
        Name: ${self:service}-${self:provider.stage}-certificate

    MusicBucket:
      Description: S3 Music Files Bucket
      Value: !Ref MusicFilesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-music-bucket

    AssetsBucket:
      Description: S3 Assets Bucket
      Value: !Ref AssetsBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-assets-bucket

plugins:
  - serverless-domain-manager
  - serverless-offline
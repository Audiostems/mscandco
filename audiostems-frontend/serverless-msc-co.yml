# MSC & Co Platform - Enterprise AWS Deployment
# Deploying the actual working platform from localhost:3002

service: msc-co-platform

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'production'}
  region: ${opt:region, 'us-east-1'}
  
  environment:
    NODE_ENV: production
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    
    # Copy environment variables from working platform
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${env:AUTH0_CLIENT_SECRET}
    NEXTAUTH_SECRET: ${env:NEXTAUTH_SECRET}
    NEXTAUTH_URL: https://${self:custom.domainName}
    
    # S3 Storage
    MUSIC_FILES_BUCKET: ${self:custom.musicBucket}
    ASSETS_BUCKET: ${self:custom.assetsBucket}
    
    # Database (if using)
    DATABASE_URL: ${env:DATABASE_URL, 'postgresql://localhost:5432/mscco'}
    
  # Enterprise IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub "${MusicFilesBucket}/*"
            - !Sub "${AssetsBucket}/*"
            - !Ref MusicFilesBucket
            - !Ref AssetsBucket
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

# Custom variables
custom:
  domainName: ${env:DOMAIN_NAME, 'api.mscco.com'}
  musicBucket: msc-co-music-${self:provider.stage}
  assetsBucket: msc-co-assets-${self:provider.stage}

# Lambda Functions
functions:
  # Next.js Application
  nextApp:
    handler: src/lambda/nextjs-handler.main
    memorySize: 2048
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
    environment:
      APP_ROOT: ${self:service}-${self:provider.stage}

  # API Routes
  api:
    handler: src/lambda/api-handler.main
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

# AWS Resources
resources:
  Resources:
    # S3 Bucket for Music Files
    MusicFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.musicBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    # S3 Bucket for Assets (Public)
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.assetsBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    # CloudFront Distribution for Global CDN
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: MSC & Co Platform CDN
          DefaultRootObject: index.html
          PriceClass: PriceClass_All
          
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: 
                Fn::Join:
                  - ""
                  - - Ref: ApiGatewayRestApi
                    - ".execute-api."
                    - ${self:provider.region}
                    - ".amazonaws.com"
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only

  # Stack Outputs
  Outputs:
    ApiGatewayUrl:
      Description: API Gateway URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    CloudFrontUrl:
      Description: CloudFront Distribution URL
      Value: !Sub "https://${CloudFrontDistribution.DomainName}"
      Export:
        Name: ${self:service}-${self:provider.stage}-cdn-url

    MusicBucket:
      Description: S3 Music Files Bucket
      Value: !Ref MusicFilesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-music-bucket

plugins:
  - serverless-offline
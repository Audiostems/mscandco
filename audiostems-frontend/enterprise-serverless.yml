# MSC & Co Music Distribution Platform - Enterprise Serverless Configuration
# Professional-grade deployment with complete AWS infrastructure

service: msc-co-enterprise-platform

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'production'}
  region: ${opt:region, 'us-east-1'}
  
  # Enterprise environment variables
  environment:
    NODE_ENV: production
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    
    # Database configuration
    DATABASE_URL: !Sub 
      - "postgresql://mscco:${password}@${endpoint}:5432/mscco_production"
      - endpoint: !GetAtt AuroraCluster.Endpoint.Address
        password: ${ssm:/msc-co/database/password}
    
    # S3 Storage
    MUSIC_FILES_BUCKET: !Ref MusicFilesBucket
    ASSETS_BUCKET: !Ref AssetsBucket
    
    # CloudFront CDN
    CDN_DOMAIN: !GetAtt CloudFrontDistribution.DomainName
    
    # Cognito Authentication
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    
    # Auth0 Integration
    AUTH0_DOMAIN: ${ssm:/msc-co/auth0/domain}
    AUTH0_CLIENT_ID: ${ssm:/msc-co/auth0/client-id}
    AUTH0_CLIENT_SECRET: ${ssm:/msc-co/auth0/client-secret}
    
  # Enterprise IAM permissions
  iam:
    role:
      statements:
        # S3 Access
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub "${MusicFilesBucket}/*"
            - !Sub "${AssetsBucket}/*"
            - !Ref MusicFilesBucket
            - !Ref AssetsBucket
        
        # RDS Data API Access
        - Effect: Allow
          Action:
            - rds-data:*
          Resource: !Sub "${AuroraCluster}/*"
        
        # Cognito Access
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: !GetAtt CognitoUserPool.Arn
        
        # CloudWatch Logs
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cloudwatch:PutMetricData
          Resource: "*"
        
        # SQS and SNS
        - Effect: Allow
          Action:
            - sqs:*
            - sns:*
          Resource: "*"

# Enterprise Lambda Functions
functions:
  # Authentication API
  auth:
    handler: src/lambda/auth.main
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: /api/auth/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
    environment:
      FUNCTION_NAME: auth

  # Music Management API
  music:
    handler: src/lambda/music.main
    memorySize: 3008
    timeout: 300
    events:
      - http:
          path: /api/music/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
    environment:
      FUNCTION_NAME: music

  # Artist Management API
  artists:
    handler: src/lambda/artists.main
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: /api/artists/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
    environment:
      FUNCTION_NAME: artists

  # Analytics API
  analytics:
    handler: src/lambda/analytics.main
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: /api/analytics/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
    environment:
      FUNCTION_NAME: analytics

  # Distribution API
  distribution:
    handler: src/lambda/distribution.main
    memorySize: 1024
    timeout: 30
    events:
      - http:
          path: /api/distribution/{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
    environment:
      FUNCTION_NAME: distribution

  # Next.js Frontend
  nextApp:
    handler: src/lambda/nextjs.main
    memorySize: 2048
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: ANY
    environment:
      FUNCTION_NAME: nextApp

# Enterprise AWS Resources
resources:
  Resources:
    # Aurora Serverless V2 PostgreSQL Database
    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        DBClusterIdentifier: msc-co-aurora-${self:provider.stage}
        Engine: aurora-postgresql
        EngineMode: provisioned
        EngineVersion: '15.4'
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0.5
          MaxCapacity: 64
        MasterUsername: mscco
        MasterUserPassword: ${ssm:/msc-co/database/password}
        DatabaseName: mscco_production
        VpcSecurityGroupIds:
          - !Ref DatabaseSecurityGroup
        DBSubnetGroupName: !Ref DatabaseSubnetGroup
        BackupRetentionPeriod: 30
        DeletionProtection: true
        EnableCloudwatchLogsExports:
          - postgresql
        StorageEncrypted: true

    # Database Instance
    AuroraInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref AuroraCluster
        Engine: aurora-postgresql
        PubliclyAccessible: false

    # VPC for Enterprise Security
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: msc-co-vpc-${self:provider.stage}

    # Private Subnets
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: msc-co-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: msc-co-private-subnet-2

    # Database Subnet Group
    DatabaseSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for Aurora Serverless
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          - Key: Name
            Value: msc-co-db-subnet-group

    # Database Security Group
    DatabaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Aurora Serverless
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref LambdaSecurityGroup

    # Lambda Security Group
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: !Ref VPC
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0

    # S3 Bucket for Music Files
    MusicFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: msc-co-music-files-${self:provider.stage}-${aws:accountId}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        LifecycleConfiguration:
          Rules:
            - Id: MusicFilesLifecycle
              Status: Enabled
              Transitions:
                - TransitionInDays: 30
                  StorageClass: STANDARD_IA
                - TransitionInDays: 90
                  StorageClass: GLACIER
                - TransitionInDays: 365
                  StorageClass: DEEP_ARCHIVE

    # S3 Bucket for Assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: msc-co-assets-${self:provider.stage}-${aws:accountId}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: MSC & Co Enterprise CDN
          DefaultRootObject: index.html
          PriceClass: PriceClass_All
          HttpVersion: http2and3
          
          DefaultCacheBehavior:
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: 
                Fn::Join:
                  - ""
                  - - Ref: ApiGatewayRestApi
                    - ".execute-api."
                    - ${self:provider.region}
                    - ".amazonaws.com"
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only

    # AWS Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: msc-co-users-${self:provider.stage}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: true
            Mutable: true

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: msc-co-client-${self:provider.stage}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    # WAF Web ACL
    WebACL:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: msc-co-waf-${self:provider.stage}
        Scope: CLOUDFRONT
        Description: Enterprise WAF protection for MSC & Co
        DefaultAction:
          Allow: {}
        Rules:
          - Name: RateLimitRule
            Priority: 1
            Statement:
              RateBasedStatement:
                Limit: 10000
                AggregateKeyType: IP
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RateLimitRule

  # Stack Outputs
  Outputs:
    ApiGatewayUrl:
      Description: API Gateway URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    CloudFrontDomain:
      Description: CloudFront Distribution Domain
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: ${self:service}-${self:provider.stage}-cdn-domain

    DatabaseEndpoint:
      Description: Aurora Serverless Endpoint
      Value: !GetAtt AuroraCluster.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-db-endpoint

    MusicFilesBucket:
      Description: S3 Music Files Bucket
      Value: !Ref MusicFilesBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-music-bucket

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'